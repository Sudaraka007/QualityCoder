›
@E:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\Calculator.cs
	namespace 	
ConsoleApp1
 
{ 
class		 	

Calculator		
 
:		 
ICalculator		 "
<		" #
double		# )
>		) *
{

 
public 
double 
CalculateMax "
(" #
double# )
[) *
]* +
array, 1
)1 2
{ 	
return 
array 
. 
Max 
( 
) 
; 
} 	
public 
double 
CalculateMin "
(" #
double# )
[) *
]* +
array, 1
)1 2
{ 	
return 
array 
. 
Min 
( 
) 
; 
} 	
} 
} ²
AE:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\ICalculator.cs
	namespace 	
ConsoleApp1
 
{ 
	interface		 
ICalculator		 
<		 
T		 
>		 
{

 
T 	
CalculateMax
 
( 
T 
[ 
] 
array  
)  !
;! "
T 	
CalculateMin
 
( 
T 
[ 
] 
array  
)  !
;! "
} 
} ¶
=E:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\Program.cs
	namespace 	
ConsoleApp1
 
{ 
class		 	
Program		
 
{

 
static 
void 
Main 
( 
string 
[  
]  !
args" &
)& '
{ 	
string 
input 
= 
Console "
." #
ReadLine# +
(+ ,
), -
;- .
string 
[ 
] 
tokens 
= 
input #
.# $
Split$ )
() *
$char* -
)- .
;. /
double 
[ 
] 
numbers 
= 
new "
double# )
[) *
tokens* 0
.0 1
Length1 7
-8 9
$num: ;
]; <
;< =

Calculator 
Calc 
= 
new !

Calculator" ,
(, -
)- .
;. /
if 
( 
tokens 
[ 
$num 
] 
. 
ToLower !
(! "
)" #
.# $
Equals$ *
(* +
$str+ 6
)6 7
)7 8
{ 
for 
( 
int 
i 
= 
$num 
; 
i  !
<" #
tokens$ *
.* +
Length+ 1
-2 3
$num4 5
;5 6
i7 8
++8 :
): ;
{ 
numbers 
[ 
i 
] 
=  
float! &
.& '
Parse' ,
(, -
tokens- 3
[3 4
i4 5
+6 7
$num8 9
]9 :
): ;
;; <
} 
if 
( 
tokens 
[ 
$num 
] 
. 
ToLower %
(% &
)& '
.' (
Equals( .
(. /
$str/ 4
)4 5
)5 6
{ 
Console 
. 
	WriteLine %
(% &
$str& 3
+4 5
Calc6 :
.: ;
CalculateMin; G
(G H
numbersH O
)O P
)P Q
;Q R
} 
else 
if 
( 
tokens 
[  
$num  !
]! "
." #
ToLower# *
(* +
)+ ,
., -
Equals- 3
(3 4
$str4 9
)9 :
): ;
{   
Console"" 
."" 
	WriteLine"" %
(""% &
$str""& 3
+""4 5
Calc""6 :
."": ;
CalculateMax""; G
(""G H
numbers""H O
)""O P
)""P Q
;""Q R
}## 
Console$$ 
.$$ 
ReadKey$$ 
($$  
)$$  !
;$$! "
}%% 
else&& 
{'' 
Console(( 
.(( 
	WriteLine(( !
(((! "
$str((" )
)(() *
;((* +
Console)) 
.)) 
ReadKey)) 
())  
)))  !
;))! "
}** 
}++ 	
},, 
}-- ø
ME:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str &
)& '
]' (
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str (
)( )
]) *
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *}
{E:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs}
{E:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs}
{E:\Work Space\QualityCoder\ConsoleApp1\ConsoleApp1\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs